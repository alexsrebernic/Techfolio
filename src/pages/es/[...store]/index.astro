---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';

import merge from 'lodash.merge';
import type { ImageMetadata } from 'astro';
import Layout from '@/layouts/PageLayout.astro';
import SinglePost from '@/components/store/SingleStoreItem.astro';
import ToBlogLink from '@/components/store/ToStoreLink.astro';

import { getCanonical, getPermaStoreLink } from '@/utils/permalinks';
import { getStaticPathsBlogNormalizedStoreItem, storeNormalizedStoreItemRobots } from '@/utils/store';
import { findImage } from '@/utils/images';
import type { MetaData } from '@/types';
import RelatedPosts from '@/components/store/RelatedStoreItems.astro';
import { I18N } from '@/utils/config';

export const prerender = true;

export const getStaticPaths = (async () => {
  const lang = Astro.currentLocale!
  return await getStaticPathsBlogNormalizedStoreItem(lang);
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { storeItem } = Astro.props as Props;

const url = getCanonical(getPermaStoreLink(storeItem.permalink, 'storeItem'));
const image = (await findImage(storeItem.image)) as ImageMetadata | string | undefined;
const metadata = merge(
  {
    title: storeItem.title,
    description: storeItem.brief_description,
    robots: {
      index: storeNormalizedStoreItemRobots?.index,
      follow: storeNormalizedStoreItemRobots?.follow,
    },
    openGraph: {
      type: 'article',
      ...(image ? { images: [{ url: image, width: (image as ImageMetadata)?.width, height: (image as ImageMetadata)?.height }] } : {}),
    },
  },
  { ...(storeItem?.metadata ? { ...storeItem.metadata, canonical: storeItem.metadata?.canonical || url } : {}) }
) as MetaData;
---

<Layout metadata={metadata}>
  <ToBlogLink />
  <SinglePost storeItem={{ ...storeItem, image: image }} url={url} />
  <ToBlogLink />
  <RelatedPosts storeItem={storeItem} />
</Layout>
