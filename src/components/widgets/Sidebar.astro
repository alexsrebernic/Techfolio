---
import { Icon } from "astro-icon/components";
import Logo from "~/components/Logo.astro";
import ToggleTheme from "~/components/common/ToggleTheme.astro";
import ToggleMenu from "~/components/common/ToggleMenu.astro";
import LanguagePicker from "../common/LanguagePicker.astro";
import Image from "../common/Image.astro";
import { getLocalizedHomePermalink } from "~/utils/permalinks";
import { trimSlash, getAsset } from "~/utils/permalinks";
import { socialMediaDataHeader } from "./Sidebar/icons/SocialMedia";
import { getLocaleFromUrl } from '@/i18n/translator';
import type { Author } from "@/types";

const locale = getLocaleFromUrl(Astro.url);

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface ActionLink extends Link {
  class?: string;
  type?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<ActionLink>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  showLanguagePicker?: boolean;
  position?: string;
  author: Author;
}

const {
  id = "sidebar",
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  showLanguagePicker = false,
  position = "center",
  author,
} = Astro.props;
function extractSocialMediaUrls(object : Author){
    const socialMedias : {icon:string , url: string}[] = []
    for(const key in object) {
      if(object.hasOwnProperty(key) && object[key] && key.toLocaleLowerCase().endsWith('url')){
        console.log(key)
        socialMedias.push(
          {
            url: object[key],
            icon: `social-media/${key.slice(0,-4)}`
          }
        )
      }
    }
    return socialMedias
}
const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`
---

<sidebar
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    "top-0 sticky z-40 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] overflow-auto md:min-h-[700px] md:h-screen md:max-w-[300px] ease-in-out bg-page",
  ]}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      "relative h-full text-default py-3 px-3 md:px-6 mx-auto w-full md:flex flex-col md:justify-between",
    ]}
  >
    <div class:list={[{ "mr-auto rtl:mr-0 rtl:ml-auto": position === "right" }, "flex flex-col mt-5 space-y-4 hidden md:block justify-between"]}>
      <Image src={author.photo.src} width={150} height={150} class='mx-auto   rounded-lg  shadow-lg' alt={author.first_name + author.last_name} />
      <div class="flex flex-col items-center mt-2">
        <span class="font-semibold">
          {author.first_name} {author.last_name}
        </span>
        <span class="text-gray-400 font-[400] text-sm" >
          {author.role}
        </span>
      </div>
      <ul class="flex flex-wrap gap-2 items-center justify-center">
        {
          extractSocialMediaUrls(author).map(item => (
            <li class="text-muted hover:scale-105 transition dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm  inline-flex items-center">
                <a
                  href={item.url}
                >
                    <Icon size={25} name={item.icon}/>
                </a>
              </li>
          ))
        }
      </ul>
      <div class="flex items-center md:hidden">
        {/* <ToggleTheme /> */}
        <ToggleMenu />
      </div>
    </div>
    <nav
      class="items-center flex-1  py-7  w-full md:w-auto hidden md:flex text-default overflow-y-auto overflow-x-hidden md:overflow-y-visible md:overflow-x-auto md:mx-2 flex-col"
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col  md:self-center w-full  text-xl md:text-[0.9375rem] tracking-[0.01rem] font-medium  space-y-1"
      >
        {
          links.map(({ text, href, icon, links }) => (
            <li class={links?.length ? "dropdown w-full" : " w-full"}>
              {links?.length ? (
                <>
                  <button class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center">
                    {text} <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline" />
                  </button>
                  <ul class="dropdown-menu md:backdrop-blur-md dark:md:bg-dark rounded md:absolute pl-4 md:pl-0 md:hidden font-medium md:bg-white/90 md:min-w-[200px] drop-shadow-xl">
                    {links.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          class:list={[
                            "first:rounded-t last:rounded-b md:hover:bg-gray-100 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap",
                            { "aw-link-active" : href2 === currentPath}
                          ]}
                          href={href2}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                class=""
                  class:list={[
                    "hover:text-link transition w-full dark:fill-white  text-muted dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700 space-x-2 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm px-2 py-2 inline-flex items-center",
                    { "dark:bg-[#353535] bg-gray-300 text-black": href === currentPath }
                  ]}
                  href={href}
                >
                  <Icon name={icon} class="dark:fill-white" size={23}  />
                  <p class="text-[16px] "
                    class:list={[
                    { " dark:text-white text-black": href === currentPath }
                  ]}
                  >
                    {text}
                  </p>
                </a>
              )}
            </li>
          ))
        }
      </ul>
      <ul class="flex flex-wrap gap-2 items-center justify-center md:hidden">
        {
          extractSocialMediaUrls(author).map(item => (
            <li class="text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm  inline-flex items-center">
                <a
                  href={item.url}
                >
                    <Icon size={25} name={item.icon}/>
                </a>
              </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { "ml-auto rtl:ml-0 rtl:mr-auto": position === "left" },
        "hidden md:self-center flex md:flex items-center md:mb-0 fixed w-full md:w-auto md:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 md:p-0",
      ]}
    >
      <div class="items-center flex justify-between w-full md:w-auto">
        <div class="flex">
          {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 md:w-5 md:h-5 md:inline-block" />}
          {
            showRssFeed && (
              <a
                class="text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
                aria-label="RSS Feed"
                href={getAsset('/rss.xml')}
              >
                <Icon name="tabler:rss" class="w-5 h-5" />
              </a>
            )
          }
          {showLanguagePicker && <LanguagePicker className="ml-4" />}
        </div>
        {
          actions?.length ? (
            <span class="ml-4 rtl:ml-0 rtl:mr-4">
              {actions.map(({ text, href, class: className }) => (
                <a class:list={["btn ml-2 py-2.5 px-5.5 md:px-6 font-semibold shadow-none text-sm", className]} href={href}>
                  <Fragment set:html={text} />
                </a>
              ))}
            </span>
          ) : (
            ""
          )
        }
      </div>
    </div>
  </div>
</header>
<style lang="css">
.aw-link-active {
 @apply text-red-600
}
</style>
